#include <iostream>
#include <vector>
#include <algorithm>

std::vector<int> twoSum(std::vector<int>& nums, int target) {
    std::vector<std::pair<int, int>> num_pairs; // Pair each number with its index
    for (int i = 0; i < nums.size(); ++i) {
        num_pairs.emplace_back(nums[i], i);
    }

    // Sorting the pairs based on the number value
    std::sort(num_pairs.begin(), num_pairs.end());

    int left = 0;
    int right = nums.size() - 1;

    // Using the  two-pointer technique
    while (left < right) {
        int sum = num_pairs[left].first + num_pairs[right].first;
        if (sum == target) {
            return {num_pairs[left].second, num_pairs[right].second};
        } else if (sum < target) {
            ++left;
        } else {
            --right;
        }
    }

    return {}; // 
}

int main() {
    // Test case 1
    std::vector<int> nums1 = {2, 7, 11, 15};
    int target1 = 9;
    std::vector<int> result1 = twoSum(nums1, target1);
    std::cout << "Indices: [" << result1[0] << ", " << result1[1] << "]" << std::endl;

    // Test case 2
    std::vector<int> nums2 = {3, 2, 4};
    int target2 = 6;
    std::vector<int> result2 = twoSum(nums2, target2);
    std::cout << "Indices: [" << result2[0] << ", " << result2[1] << "]" << std::endl;

    // Test case 3
    std::vector<int> nums3 = {3, 3};
    int target3 = 6;
    std::vector<int> result3 = twoSum(nums3, target3);
    std::cout << "Indices: [" << result3[0] << ", " << result3[1] << "]" << std::endl;

    return 0;
}
